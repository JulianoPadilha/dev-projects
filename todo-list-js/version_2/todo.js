var addTask = function(){
	var task = document.getElementById('task').value; // Pega o valor digitado no input e armazena na vari√°vel 'task'.

	var tasks = getTasks(); // Chamamos em uma vari√°vel a fun√ß√£o 'getTasks' que cria um array que traz todas as tasks salvas antes de inserir uma nova.

	if(task){ // Verifica se h√° alguma task preenchida dentro do input
		tasks.push(task); // Utilizamos o push para jogar o elemento armazenado na vari√°vel 'task' para nosso Array.

		localStorage.setItem('tasks', JSON.stringify(tasks)); // Utilizamos o localStorage para "persistir" as informa√ß√µes no storage do browser. Com par√¢metro passamos a chave e o valor, usando 'JSON.stringify' para transformar o valor em ums string.

		document.getElementById('task').value = ''; // Retorna para vazio o input ap√≥s um item ser inserido.
	}

	// showTasks(); // Chamamos a fun√ß√£o showTasks() para ela mostrar na tela o novo elemento adicionado logo ap√≥s o mesmo ser inserido. Sem ela, ter√≠amos que atualizar o navegador para ver a mudan√ßa na tela. 

	document.location.reload(true); // Utilizamos o reload(true) para ap√≥s a fun√ß√£o ser realizada atualizar a a tela. Sendo assim, a fun√ß√£o chamada acima pode ser retirada. 

}

var getTasks = function(){
	var tasks = []; // Cria um array vazio caso n√£o tenha nada j√° armazenado.

	var tasks_string = localStorage.getItem('tasks'); // Pega o conte√∫do/valores da chave 'tasks' do 'localStorage' e armazena na vari√°vel 'tasks_string'

	if(tasks_string != null){ // Verifica se o array de elementos n√£o √© nulo. Caso true ent√£o retornar√° a convers√£o de um JSON string para um Javascript data.
		return JSON.parse(tasks_string);
	}
}

var showTasks = function(){
	var tasks = getTasks(); // Guardamos em uma vari√°vel chamada 'tasks' todos as tasks que temos armazenadas utilizando a fun√ß√£o getTasks;

	var html = '<ul>'; // Criamos uma vari√°vel 'html' que ir√° concatenando a nossa estrutura HTML.

	tasks.forEach(function(elemento, index){ // Criamos um forEach para iterar todos os elementos do nosso Array. Utilizamos 'tasks' na frente para referenciar de qual lugar estamos trazendo os elementos. 
		html += '<li> üìå ' + elemento + '<button class="remove" id="'+ index +'">Remover</button></li>'; // Novamente utilizamos a vari√°vel 'html' para concatenar nosso HTML passando o 'elemento' que referencia os itens pertencentes as tasks. 'index' representa nosso index dentro do array.
	});

	html += '</ul>'; // Fechamos a concatena√ß√£o.

	document.getElementById('tasks').innerHTML = html; // Inserimos o conte√∫do da vari√°vel 'html' dentro da 'div' que cont√©m o id 'todos'. O innerHTML serve justamente para inserir novos conte√∫dos.

	var buttons = document.getElementsByClassName('remove'); // Pegamos todos os elementos do DOM que possuem a class 'remove' e armazenamos na vari√°vel 'buttons'.

	for (var i=0; i < buttons.length; i++){ // Iteramos nossa vari√°vel nossos elementos e adicionamos para cada elemento com a class 'remove' o addEventListener conectado com o evento 'click' e o callback da fun√ß√£o 'removeTask'.
		buttons[i].addEventListener('click', removeTask);
	};
}

var removeTask = function(){
	var id = this.getAttribute('id'); // Criamos uma vari√°vel id para receber o atual objeto-DOM referente ao bot√£o remover que o usu√°rio clicar. O this representa o objeto-DOM atual.

	var tasks = getTasks(); // Guardamos em uma vari√°vel chamada 'tasks' todos as tasks que temos armazenadas utilizando a fun√ß√£o getTasks;

	tasks.splice(id, 1); // Utilizamos o m√©todo splice para remover um elemento espec√≠fico. Como par√¢metro passamos o id referente ao elemento que ser√° removido do array e o valor "1", que representa que estamos realizando apenas uma remo√ß√£o.

	localStorage.setItem('tasks', JSON.stringify(tasks)); // Ap√≥s o elemento ser removido, utilizamos novamente o serItem para salvar a nossa nova lista de array.


	// showTasks(); // Chamamos a fun√ß√£o showTasks() para ela mostrar na tela a nossa lista de tasks atualizada logo ap√≥s um item ter sido removido. Sem ela, ter√≠amos que atualizar o navegador para ver a mudan√ßa na tela. 

	document.location.reload(true); // Utilizamos o reload(true) para ap√≥s a fun√ß√£o ser realizada atualizar a a tela. Sendo assim, a fun√ß√£o chamada acima pode ser retirada.
}

var hasTask = function(){ // Fun√ß√£o que verifica se h√° alguma task salva dentro do Array do localStorage.

	var tasks = getTasks(); // Guardamos em uma vari√°vel chamada 'tasks' todos as tasks que temos armazenadas utilizando a fun√ß√£o getTasks;

	if(tasks == ''){ // Utilizamos uma condicional para exibir uma mensagem na tela de acordo com o status do nosso array.
		text = '<h2>N√£o h√° tarefas cadastradas!</h2>';
		document.getElementById('msg').innerHTML = text;
	} else {
		text = '<h2>Suas tarefas pendentes:</h2>';
		document.getElementById('msg').innerHTML = text;
	}
}

document.getElementById('add').addEventListener('click', addTask); // Buscamos o elemento contendo o id igual a 'add' e em seguinda utilizamos o m√©todo 'addEventListener' com o evento de 'click' e o callback que ser√° chamado, no caso, nossa fun√ß√£o addTask.

window.addEventListener('keydown', function(event){ // Inserimos uma alternativa para a inser√ß√£o os elementos, que √© pressionando a tecla 'enter'. Para este caso precisamos passar um par√¢metro que √© uma fun√ß√£o que recebe o evento com a keyCode que pressionamos. Depois verificamos se √© true e caso seja chama o addTask(); 
	if(event.keyCode == 13){
		addTask();
	};
}); 

hasTask(); // Passamos a fun√ß√£o aqui para verificar antes mesmo de listar nossos elementos se o array √© vazio ou n√£o.

showTasks(); // Chamamos a fun√ß√£o showTasks() para mostrar na telas os elementos do nosso array.